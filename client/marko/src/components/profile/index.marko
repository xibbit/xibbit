// The MIT License (MIT)
//
// xibbit 2.0.0 Copyright (c) © 2021 Daniel W. Howard and Sanjana A. Joshi Partnership
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// @version 2.0.0
// @copyright xibbit 2.0.0 Copyright (c) © 2021 Daniel W. Howard and Sanjana A. Joshi Partnership
// @license http://opensource.org/licenses/MIT
class {
  onCreate() {
    this.state = {
      profile: {
        name: '',
        address: '',
        address2: '',
        city: '',
        state: '',
        zip: ''
      },
      profile_image: '',
      error: ''
    };
    this.profile_image = '';
  }
  onMount() {
    xibbitObject.send({
      type: 'user_profile'
    }, event => {
      if (event.i) {
        const username = xibbitObject.getSessionValue('me').username;
        const publicFolder = global.url_config.server_base[global.url_config.server_platform]+'/public/images';
        this.profile_image = publicFolder+'/'+username+'.png';
        if (global.url_config.server_platform === 'django') {
          this.profile_image = '/public/images/'+username+'.png';
        }
        this.state.profile = event.profile;
        this.state.profile_image = this.profile_image + '?r=' + Math.floor(Math.random() * 1000);
      }
      this.state.error = event.i || event.e;
    });
  }
  setName(event) {
    this.state.profile.name = event.target.value;
  }
  setAddress(event) {
    this.state.profile.address = event.target.value;
  }
  setAddress2(event) {
    this.state.profile.address2 = event.target.value;
  }
  setCity(event) {
    this.state.profile.city = event.target.value;
  }
  setState(event) {
    this.state.profile.state = event.target.value;
  }
  setZip(event) {
    this.state.profile.zip = event.target.value;
  }
  handleFormSubmit(event) {
    event.preventDefault();
    xibbitObject.send({
      type: 'user_profile_mail_update',
      user: this.state.profile
    }, event => {
      this.state.error = event.i || event.e;
    });
  }
  uploadProfileImage(event) {
    const urls = {
      golang: '/user/profile/upload_photo',
      node: '/user/profile/upload_photo',
      php: global.url_config.server_base[global.url_config.server_platform]+'/app.php', // /user_profile_upload_photo.php
      django: '/upload_photo/image_upload',
    };
    const url = urls[global.url_config.server_platform];
    xibbitObject.upload(url, {
      type: 'user_profile_upload_photo',
      image: event.target.files[0],
    }, event => {
      this.state.profile_image = this.profile_image + '?r=' + Math.floor(Math.random() * 1000);
      this.state.error = event.i || event.e;
    });
  }
}

style {
  .form-control {
    display: flex;
    flex-direction: column;
  }
  .row {
    display: flex;
    flex-direction: row;
  }
}

<div class="profile-view">
  <div class="form-control">
    <label>Upload image</label>
    <input class="form-control" type="file" on-change('uploadProfileImage') />
  </div>
  <div>
    <img alt="Profile" src=state.profile_image />
  </div>
  <form name="profile" on-submit("handleFormSubmit")>
    <div class="form-control">
      <label>Name</label>
      <input type="text" key="name" value=state.profile.name on-input('setName') placeholder="Name" />
    </div>
    <div class="form-control">
      <label>Address</label>
      <input type="text" key="address" value=state.profile.address on-input('setAddress') placeholder="Address" />
    </div>
    <div class="form-control">
      <input type="text" key="address2" value=state.profile.address2 on-input('setAddress2') />
    </div>
    <div class="form-control">
      <label>City</label>
      <input type="text" key="city" value=state.profile.city on-input('setCity') placeholder="City" />
    </div>
    <div class="row">
      <div class="form-control">
        <label>State</label>
        <input type="text" key="state" value=state.profile.state on-input('setState') placeholder="State" />
      </div>
      <div class="form-control">
        <label>Postal</label>
        <input type="text" key="zip" value=state.profile.zip on-input('setZip') placeholder="Postal code" />
      </div>
    </div>
    <div class="row">
      <button type="submit" data-ng-disabled="ProfileView.form.$invalid">Update</button>
    </div>
  </form>
  <div class="row">
    ${state.error}
  </div>
</div>
