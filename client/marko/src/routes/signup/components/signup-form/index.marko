// The MIT License (MIT)
//
// xibbit 1.5.1 Copyright (c) © 2021 Daniel W. Howard and Sanjana A. Joshi Partnership
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// @version 1.5.1
// @copyright xibbit 1.5.1 Copyright (c) © 2021 Daniel W. Howard and Sanjana A. Joshi Partnership
// @license http://opensource.org/licenses/MIT
class {
  onCreate() {
    this.state = {
      username: '',
      email: '',
      pwd: '',
      error: ''
    };
  }
  setUsername(event) {
    this.state.username = event.target.value;
  }
  setEmail(event) {
    this.state.email = event.target.value;
  }
  setPwd(event) {
    this.state.pwd = event.target.value;
  }
  handleFormSubmit(event) {
    const { username, email, pwd } = this.state;
    event.preventDefault();
    global.xibbitObject.send({
      type: 'user_create',
      username: this.state.username,
      email: this.state.email,
      pwd: global.Pwd.encrypt(this.state.email, this.state.pwd)
    }, event => {
      this.state.error = event.i || event.e;
    });
  }
}

style {
  .form-control {
    align-items: center;
    display: flex;
    flex-direction: row;
    margin: 0 0 0.5em 0;
  }
  .form-control div {
    margin: 0 0.25em 0 0;
  }
}

<div>
  <form name="signup" on-submit("handleFormSubmit")>
    <div class="row">
      <label class="text-input-label" for="username">User name</label>
      <input class="form-control text-input autofocus" type="text" name="username" key="username" on-input('setUsername') value=state.username placeholder="User name" data-ng-pattern="/^[a-z][a-z0-9]{2,11}$/" required="required" autofocus="autofocus" autocomplete="username" data-username-pattern />
    </div>
    <div class="row">
      <label class="text-input-label" for="email">E-mail</label>
      <input class="form-control text-input" type="email" name="email" key="email" value=state.email on-input('setEmail') placeholder="E-mail" data-ng-pattern="/^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/" required="required" autoComplete="username" />
    </div>
    <div class="row">
      <label class="text-input-label" for="pwd">Password</label>
      <input class="form-control text-input" type="password" name="pwd" key="pwd" value=state.pwd on-input('setPwd') placeholder="Password" data-ng-minlength="1" required="required" autoComplete="current-password" />
    </div>
    <div class="row">
      <button type="submit">Sign Up</button>
    </div>
  </form>
  <div class="row">
    ${state.error}
  </div>
</div>
